// Generated by CoffeeScript 1.12.6
(function() {
  var Ivh2BusClient, dgram,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  dgram = require('dgram');

  Ivh2BusClient = (function() {
    function Ivh2BusClient(arg) {
      var ref;
      this.multicastPort = arg.multicastPort, this.multicastAddress = (ref = arg.multicastAddress) != null ? ref : 'localhost', this.clientId = arg.clientId;
      this.sendMessage = bind(this.sendMessage, this);
      if (!this.multicastPort) {
        throw new Error('A multicast port is required');
      }
      if (!this.clientId) {
        throw new Error('A client id port is required');
      }
      this.client = dgram.createSocket('udp4');
    }

    Ivh2BusClient.prototype.sendMessage = function(message, cb) {
      var bufferizedMessage, messageWithFrom;
      if (!this._isMessageFormatCorrect(message)) {
        return cb(new Error('Message format is not correct. It should be { type: ..., payload:... }'));
      }
      messageWithFrom = Object.assign({}, message, {
        from: this.clientId
      });
      bufferizedMessage = Buffer.from(JSON.stringify(messageWithFrom));
      return this.client.send(bufferizedMessage, 0, bufferizedMessage.length, this.multicastPort, this.multicastAddress, (function(_this) {
        return function(error, bytes) {
          if (error) {
            _this.client.close();
            return cb(error);
          }
          return _this.client.close();
        };
      })(this));
    };

    Ivh2BusClient.prototype._isMessageFormatCorrect = function(message) {
      if (!message.type || !message.payload) {
        return false;
      }
      return true;
    };

    return Ivh2BusClient;

  })();

  module.exports = Ivh2BusClient;

}).call(this);
