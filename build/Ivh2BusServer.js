// Generated by CoffeeScript 1.12.6
(function() {
  var EventEmitter, Ivh2BusServer, dgram,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  dgram = require('dgram');

  EventEmitter = require('events');

  Ivh2BusServer = (function(superClass) {
    extend(Ivh2BusServer, superClass);

    function Ivh2BusServer(arg) {
      var ref;
      this.multicastAddress = (ref = arg.multicastAddress) != null ? ref : 'localhost', this.multicastPort = arg.multicastPort;
      this._handleMessage = bind(this._handleMessage, this);
      this._handleServerError = bind(this._handleServerError, this);
      if (!this.multicastPort) {
        throw new Error('A multicast port is required');
      }
      Ivh2BusServer.__super__.constructor.apply(this, arguments);
      this.server = dgram.createSocket('udp4');
    }

    Ivh2BusServer.prototype.create = function() {
      this.server.bind(this.multicastPort, this.multicastAddress);
      return this.server.once('listening', (function(_this) {
        return function() {
          return _this.emit('connected');
        };
      })(this)).once('error', (function(_this) {
        return function(error) {
          if (_this._events["error"]) {
            return _this._handleServerError(error);
          } else {
            throw error;
          }
        };
      })(this)).on('message', this._handleMessage);
    };

    Ivh2BusServer.prototype.close = function() {
      return this.server.close();
    };

    Ivh2BusServer.prototype._handleServerError = function(error) {
      this.emit('error', error);
      return this.close();
    };

    Ivh2BusServer.prototype._handleMessage = function(message) {
      var error;
      try {
        return this.emit('message', JSON.parse(message.toString()));
      } catch (error1) {
        error = error1;
        return this.emit(error);
      }
    };

    return Ivh2BusServer;

  })(EventEmitter);

  module.exports = Ivh2BusServer;

}).call(this);
